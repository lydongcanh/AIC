{"version":3,"sources":["graph.js","App.js","serviceWorker.js","index.js"],"names":["buildNodes","path","find","node","id","edges","findNodeWithId","findAdjacentNodes","nodeEdges","filter","edge","source","length","adjacentNodes","adjacentNode","target","push","App","useState","nodes","setNodes","startId","setStartId","endId","setEndId","style","height","width","name","onChange","item","value","onClick","start","end","success","visited","unvisited","currentNode","shift","concat","bfs","console","log","pop","dfs","data","links","config","directed","nodeHighlightBehavior","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0d8d687.chunk.js","sourcesContent":["export const buildNodes = (path) => [\n  {\n    \"id\": 0,\n    \"color\": path && path.find(node => node.id == 0) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 1,\n    \"color\": path && path.find(node => node.id == 1) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 2,\n    \"color\": path && path.find(node => node.id == 2) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 3,\n    \"color\": path && path.find(node => node.id == 3) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 4,\n    \"color\": path && path.find(node => node.id == 4) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 5,\n    \"color\": path && path.find(node => node.id == 5) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 6,\n    \"color\": path && path.find(node => node.id == 6) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 7,\n    \"color\": path && path.find(node => node.id == 7) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 8,\n    \"color\": path && path.find(node => node.id == 8) ? \"lightgreen\" : \"wheat\"\n  },\n  {\n    \"id\": 9,\n    \"color\": path && path.find(node => node.id == 9) ? \"lightgreen\" : \"wheat\"\n  }\n]\n\nexport const edges = [\n  {\n    \"source\": 0,\n    \"target\": 1,\n  },\n  {\n    \"source\": 0,\n    \"target\": 2,\n  },\n  {\n    \"source\": 0,\n    \"target\": 3,\n  },\n  {\n    \"source\": 1,\n    \"target\": 4,\n  },\n  {\n    \"source\": 1,\n    \"target\": 5,\n  },\n  {\n    \"source\": 2,\n    \"target\": 6,\n  },\n  {\n    \"source\": 2,\n    \"target\": 7,\n  },\n  {\n    \"source\": 3,\n    \"target\": 8,\n  },\n  {\n    \"source\": 3,\n    \"target\": 9,\n  },\n]\n\nexport const bfs = (start, end) => {\n  if (start.id == end.id)\n    return {\n      success: true,\n      visited: [end]\n    };\n\n  let visited = [];\n  let unvisited = [];\n\n  unvisited.push(start);\n  while (unvisited.length > 0) {\n    let currentNode = unvisited.shift();\n    if (currentNode == null || visited.find(node => node.id == currentNode.id))\n      continue;\n\n    visited.push(currentNode);\n\n    if (currentNode.id == end.id) \n      return {\n        success: true,\n        visited: visited\n      };\n\n      unvisited = unvisited.concat(findAdjacentNodes(currentNode));\n  }\n\n  return {\n    success: false,\n    visited: visited\n  };\n}\n\nexport const dfs = (start, end) => {\n  if (start.id == end.id)\n    return {\n      success: true,\n      visited: [end]\n    };\n\n  let visited = [];\n  let unvisited = [];\n\n  unvisited.push(start);\n  while (unvisited.length > 0) {\n    let currentNode = unvisited.pop();\n    if (currentNode == null || visited.find(node => node.id == currentNode.id))\n      continue;\n\n    visited.push(currentNode);\n\n    if (currentNode.id == end.id) \n      return {\n        success: true,\n        visited: visited\n      };\n\n      unvisited = unvisited.concat(findAdjacentNodes(currentNode));\n  }\n\n  return {\n    success: false,\n    visited: visited\n  };\n}\n\nexport const findNodeWithId = (id) => {\n  return buildNodes([]).find(node => node.id == id);\n}\n\nconst findAdjacentNodes = (node) => {\n  let nodeEdges = edges.filter(edge => edge.source == node.id);\n  if (nodeEdges == null || nodeEdges.length < 1)\n    return [];\n\n  let adjacentNodes = [];\n  for (let edge of nodeEdges) {\n    let adjacentNode = findNodeWithId(edge.target);\n    if (adjacentNode != null)\n      adjacentNodes.push(adjacentNode);\n  }\n  return adjacentNodes;\n}","import React, { useState } from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport { bfs, dfs, edges, findNodeWithId, buildNodes } from \"./graph\";\n\nfunction App() {\n\n  const [nodes, setNodes] = useState(buildNodes([]));\n  const [startId, setStartId] = useState(0);\n  const [endId, setEndId] = useState(0);\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <div style={{ height: \"5vh\", width: \"100vw\" }}>\n        <select name=\"startNode\" id=\"startNode\" onChange={item => setStartId(item.target.value)}>\n          <option value=\"0\">0</option>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n          <option value=\"7\">7</option>\n          <option value=\"8\">8</option>\n          <option value=\"9\">9</option>\n        </select>\n\n        <select name=\"endNode\" id=\"endNode\" onChange={item => setEndId(item.target.value)}>\n          <option value=\"0\">0</option>\n          <option value=\"1\">1</option>\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n          <option value=\"6\">6</option>\n          <option value=\"7\">7</option>\n          <option value=\"8\">8</option>\n          <option value=\"9\">9</option>\n        </select>\n\n        <button onClick={() => {\n          const path = bfs(findNodeWithId(startId), findNodeWithId(endId));\n          console.log(path);\n          setNodes(buildNodes(path.visited));\n        }}>\n          BFS\n        </button>\n        <button onClick={() => {\n          const path = dfs(findNodeWithId(startId), findNodeWithId(endId));\n          console.log(path);\n          setNodes(buildNodes(path.visited));\n        }}>\n          DFS\n        </button>\n      </div>\n\n      <div style={{ height: \"95vh\", width: \"100vw\" }}>\n        <Graph\n          id=\"graph-id\"\n          data={{\n            nodes: nodes,\n            links: edges\n          }}\n          config={{\n            directed: true,\n            nodeHighlightBehavior: true,\n            node: {\n              size: 500\n            }\n          }}\n          // onClickNode={onClickNode}\n          // onDoubleClickNode={onDoubleClickNode}\n          // onRightClickNode={onRightClickNode}\n          // onClickGraph={onClickGraph}\n          // onClickLink={onClickLink}\n          // onRightClickLink={onRightClickLink}\n          // onMouseOverNode={onMouseOverNode}\n          // onMouseOutNode={onMouseOutNode}\n          // onMouseOverLink={onMouseOverLink}\n          // onMouseOutLink={onMouseOutLink}\n          // onNodePositionChange={onNodePositionChange}\n        />\n      </div>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}